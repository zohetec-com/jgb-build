#!/bin/bash
# jgb-build
#
# Copyright (C) 2025 Beijing Zohetec Co., Ltd
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
set -e

. jgb-helper

JGB_BUILD_SAVED="\
  JGB_BUILD_HOST_ARCH \
  JGB_BUILD_TYPE \
  JGB_BUILD_COVERAGE \
  JGB_BUILD_SANITIZE \
  JGB_BUILD_WALL \
  JGB_BUILD_VERBOSE \
  JGB_BUILD_INSTALL \
  JGB_BUILD_RELATIVE_PATH"
JGB_BUILD_OPTIONS="cFhiLo:Pp:rRst:V:vw"
JGB_BUILD_BACK_END=
JGB_BUILD_BUILD_DIR="jgb.build"
JGB_BUILD_CACHE_FILE="$JGB_BUILD_BUILD_DIR/jgb-cache"

preset()
{
    export JGB_BUILD_BUILD_ARCH=$(uname -p)
    export JGB_BUILD_HOST_ARCH=$(uname -p)
    export JGB_BUILD_TYPE="Release"
    JGB_BUILD_COVERAGE=no
    JGB_BUILD_SANITIZE=no
    JGB_BUILD_WALL=no
    JGB_BUILD_VERBOSE=no
    JGB_BUILD_INSTALL=no
    JGB_BUILD_PACK=no
    JGB_BUILD_RELATIVE_PATH=no
    # JGB_BUILD_CONFIGURE_OPTIONS_HOST
    # yes 对于 autoconf 项目，当执行交叉编译时， 应当为 configure 设置 --host 选项。
    export JGB_BUILD_CONFIGURE_OPTIONS_HOST=yes

    # for make
    export JGB_BUILD_MAKE_OPTIONS=

    # for make install
    export JGB_BUILD_MAKE_INSTALL_TARGET=install
    export JGB_BUILD_INSTALL_FAKEROOT=
    export JGB_BUILD_HOST=
}

is_cross_compile()
{
  if [ "$JGB_BUILD_BUILD_ARCH" != $JGB_BUILD_HOST_ARCH ] ; then
    return 0
  else
    return 1
  fi
}

save_set()
{
    mkdir -p $JGB_BUILD_BUILD_DIR
    echo -n > $JGB_BUILD_CACHE_FILE
    for p in $JGB_BUILD_SAVED ;
    do
      eval "echo $p=\"\$$p\"" | tee -a $JGB_BUILD_CACHE_FILE
    done
}

clean()
{
    f=$1
    jgb_pushd $JGB_BUILD_DESTDIR
    if [ -f $f ] ; then
       while read line; do
          if [ -d $line ] ; then
            rm -dv $line || true
          else
            rm -v $line || true
          fi 2> /dev/null
       done < $f
    fi
    jgb_popd
}

# 检查是否存在比参考文件还新的文件。
# 如果存在，可能是系统时间异常，或者文件时间戳异常，总之 find 结果不可用。
check_file_timestamp()
{
    jgb_pushd $JGB_BUILD_DESTDIR
    local found=$(find . -newercc $ref_file -print -quit)
    if [ -n "$found" ] ; then
      JGB_BUILD_PACK=no
      JGB_BUILD_INSTALL=no
      rm $ref_file
      echo "警告：检测到文件时间戳异常。打包功能不可用。"
    fi
    jgb_popd
}

acquire_lock()
{
    if mkdir "$install_lock_dir" 2>/dev/null; then
        echo "Lock acquired."
        owned_lock=yes
    fi
}

release_lock()
{
    if [ "$owned_lock" == yes ] ; then
        rmdir "$install_lock_dir"
        echo "Lock released."
    fi
}

wait_lock()
{
    while true ; do
        acquire_lock
        if [ "$owned_lock" == yes ] ; then
            return 0
        else
            echo "Waiting for lock ..."
            sleep 1
        fi
    done
}

pre_install()
{
    # 不可同时运行多个 jgb-build 脚本执行安装到同一目录，否则打包结果混淆。
    install_lock_dir=$JGB_BUILD_DESTDIR/lock.dir
    wait_lock
    touch $ref_file
    sleep 1
}

trap release_lock EXIT

help()
{
    echo "[Usage] jgb-build [-chiLPrRsvw] [-o TARGET] [-p ARCH] [-t Release|Debug] [-V VAR]"
    echo "-c 启用代码覆盖编译选项"
    echo "-F 使用 fakeroot 执行 make install"
    echo "-h display this help text, then exit"
    echo "-i 执行安装"
    echo "-r 启用源文件相对路径编译选项"
    echo "-o TARGET 指定 make 的安装目标(缺省为 install)"
    echo "-p ARCH 选择目标架构"
    echo "-R 重新构建"
    echo "-s 启用 sanitize 编译选项"
    echo "-t Release|Debug 选择构建配置"
    echo "-L 打包到 local 目录"
    echo "-P 打包到 dist 目录"
    echo "-V VAR 为打包结果文件添加指定的变种名称"
    echo "-v 启用 VERBOSE"
    echo "-w 启用编译警告选项"
    exit 1
} >&2

include_cross_config()
{
    if is_cross_compile ; then
      local cross_config=$JGB_BUILD_CONFIG_DIR/cross.config
      if [ -f $cross_config ] ; then
        . $cross_config
        JGB_BUILD_HOST=${JGB_BUILD_CONFIG_HOST[${JGB_BUILD_BUILD_ARCH}-${JGB_BUILD_HOST_ARCH}]}
        [ -n "$JGB_BUILD_HOST" ]
      fi
    fi
}

include_options()
{
    options_file=$JGB_BUILD_CONFIG_DIR/$package_name/options
    if [ -f $options_file ] ; then
      . $options_file
    fi
}

stat_time_start=$(date +%s.%N)

goto_top_dir
JGB_BUILD_TOP_DIR=$PWD
package_name=$(basename $PWD)
preset

while getopts $JGB_BUILD_OPTIONS opt; do
  case ${opt} in
    h)
      help
      ;;
    L)
      JGB_BUILD_PACK=yes
      JGB_BUILD_INSTALL=yes
      pack_dir=local
    ;;
    P)
      # 调试阶段，频繁修改小部分代码后打包测试，重新构建太费时。
      #JGB_BUILD_REBULD=yes
      JGB_BUILD_PACK=yes
      JGB_BUILD_INSTALL=yes
      pack_dir=dist
      ;;
    R)
      JGB_BUILD_REBULD=yes
      ;;
  esac
done

if [ "$JGB_BUILD_REBULD" == yes ] ; then
  rm -rf $JGB_BUILD_BUILD_DIR
  if [ "$JGB_BUILD_BACK_END" == "cmake" ] ; then
    rm -rf CMakeFiles CMakeCache.txt
  elif [ "$JGB_BUILD_BACK_END" == "autoconf" ] || [ "$JGB_BUILD_BACK_END" == "makefile" ] ; then
    make clean || true
  fi
fi

# 载入记忆配置
if [ -f $JGB_BUILD_CACHE_FILE ] ; then
  . $JGB_BUILD_CACHE_FILE
fi

# https://stackoverflow.com/questions/2189281/how-to-call-getopts-in-bash-multiple-times
unset OPTIND
while getopts $JGB_BUILD_OPTIONS opt; do
  case ${opt} in
    c)
      JGB_BUILD_COVERAGE=yes
      ;;
    F)
      JGB_BUILD_INSTALL_FAKEROOT="fakeroot -- "
      ;;
    h)
      ;;
    i)
      JGB_BUILD_INSTALL=yes
      ;;
    o)
      JGB_BUILD_MAKE_INSTALL_TARGET=${OPTARG}
      ;;
    p)
      JGB_BUILD_HOST_ARCH=${OPTARG}
      ;;
    r)
      JGB_BUILD_RELATIVE_PATH=yes
      ;;
    s)
      JGB_BUILD_SANITIZE=yes
      ;;
    t)
      JGB_BUILD_TYPE=${OPTARG}
      ;;
    V)
      variant_name=${OPTARG}
      suffix_variant="_${variant_name}"
      ;;
    v)
      JGB_BUILD_VERBOSE=yes
      ;;
    w)
      JGB_BUILD_WALL=yes
      ;;
    ?)
      ;;
  esac
done

# 保存记忆
save_set

if [ "$JGB_BUILD_HOST_ARCH" == arm64 ] ; then
  JGB_BUILD_HOST_ARCH="aarch64"
fi

# 载入文件配置
include_cross_config
include_options

if [ "$JGB_BUILD_BACK_END" == "adhoc" ] ; then
  # 简化处理：构建即安装。
  JGB_BUILD_INSTALL=yes
fi

export JGB_BUILD_DESTDIR="$JGB_BUILD_DIR/$JGB_BUILD_TYPE/$JGB_BUILD_HOST_ARCH"

if [ "$JGB_BUILD_INSTALL" == yes  ] ; then
  mkdir -p $JGB_BUILD_DESTDIR

  # 创建参考时间戳文件
  ref_file=$(mktemp $PWD/$JGB_BUILD_BUILD_DIR/jgb-build.pack.XXXX)
  check_file_timestamp
  install_file=${package_name}${suffix_variant}.install
  # 清除已安装的文件和目录，以确保重新安装全部文件和目录，确保打包结果完整。
  clean $install_file
fi

if [ "$JGB_BUILD_PACK" == yes ] ; then
  [ -n "$pack_dir" ]
  output_dir=${JGB_BUILD_DIR}/$pack_dir/packages/$JGB_BUILD_TYPE/${JGB_BUILD_HOST_ARCH}/${package_name}
  package_file_name=${package_name}${suffix_variant}-$(date +%Y%m%d).tar.gz
  package_file_name_short=${package_name}${suffix_variant}.tar.gz
  mkdir -p $output_dir
fi

# lib/pkgconfig -- 一般情况
# lib64/pkgconfig -- openssl-3.0.16
# share/pkgconfig -- zlib
export PKG_CONFIG_PATH="${JGB_BUILD_DESTDIR}/lib/pkgconfig: \
                        ${JGB_BUILD_DESTDIR}/lib64/pkgconfig: \
                        ${JGB_BUILD_DESTDIR}/share/pkgconfig"
inc_dirs=(${JGB_BUILD_DESTDIR}/include ${JGB_BUILD_DESTDIR}/usr/include)
ld_dirs=(${JGB_BUILD_DESTDIR}/lib ${JGB_BUILD_DESTDIR}/lib64)
# 如果目录不存在，编译 xz-5.8.1 时产生大量警告。
for d in ${inc_dirs[@]} ${ld_dirs[@]} ;
do
  mkdir -p $d
done

export CFLAGS="-I${inc_dirs[0]} -I${inc_dirs[1]}"
export CXXFLAGS="$CFLAGS"
# openssl-3.0.16 install to lib64
export LDFLAGS="-L${ld_dirs[0]} -L${ld_dirs[1]}"

if [ "$JGB_BUILD_TYPE" == "Debug" ] ; then
  CFLAGS="$CFLAGS -DDEBUG -g -O0"
  CXXFLAGS="$CXXFLAGS -DDEBUG -g -O0"
fi

if [ "$JGB_BUILD_COVERAGE" == yes ] ; then
  CFLAGS="$CFLAGS -fprofile-arcs -ftest-coverage -fprofile-update=atomic"
  CXXFLAGS="$CXXFLAGS -fprofile-arcs -ftest-coverage -fprofile-update=atomic"
fi

if [ "$JGB_BUILD_SANITIZE" == yes ] ; then
  CFLAGS="$CFLAGS -fsanitize=address"
  CXXFLAGS="$CXXFLAGS -fsanitize=address"
  LDFLAGS="$LDFLAGS -fsanitize=address"
fi

if [ "$JGB_BUILD_WALL" == yes ] ; then
  CFLAGS="$CFLAGS -Werror -Wall -Wextra"
  CXXFLAGS="$CXXFLAGS -Werror -Wall -Wextra"
fi

if [ "$JGB_BUILD_RELATIVE_PATH" == yes ] && [ "$JGB_BUILD_COVERAGE" != yes ] ; then
  # [1] says：__FILE__ is implemented by the compiler, it has nothing to do with CMake.
  # 参考
  # 1 https://cmake.cmake.narkive.com/doNN52ay/file-relative-path
  # 2 https://stackoverflow.com/questions/8487986/file-macro-shows-full-path
  CFLAGS="$CFLAGS -ffile-prefix-map=$PWD=$package_name"
  CXXFLAGS="$CXXFLAGS -ffile-prefix-map=$PWD=$package_name"
fi

if [ "$JGB_BUILD_BACK_END" == "cmake" ] ; then
  JGB_BUILD_CMAKE_OPTIONS="-DCMAKE_BUILD_TYPE=$JGB_BUILD_TYPE"
  if [ "$JGB_BUILD_VERBOSE" == yes ] ; then
    JGB_BUILD_CMAKE_OPTIONS+=" -DCMAKE_VERBOSE_MAKEFILE=ON"
  fi
  if is_cross_compile ; then
    cmake_toolchain_file=$JGB_BUILD_CONFIG_DIR/cmake/${JGB_BUILD_BUILD_ARCH}-${JGB_BUILD_HOST_ARCH}.toolchain
    if [ -f $cmake_toolchain_file ] ; then
        JGB_BUILD_CMAKE_OPTIONS+=" -DCMAKE_TOOLCHAIN_FILE=$cmake_toolchain_file"
    else
        echo "没有找到 $JGB_BUILD_BUILD_ARCH-$JGB_BUILD_HOST_ARCH.toolchain 文件"
        exit 1
    fi
    cmake_TryRunResults_file=$JGB_BUILD_CONFIG_DIR/$package_name/${JGB_BUILD_HOST_ARCH}-TryRunResults.cmake
    if [ -f $cmake_TryRunResults_file ] ; then
      JGB_BUILD_CMAKE_OPTIONS+=" -C $cmake_TryRunResults_file"
    fi
  fi
  cmake -DCMAKE_INSTALL_PREFIX=$JGB_BUILD_DESTDIR $JGB_BUILD_CMAKE_OPTIONS $CMAKE_OPTIONS -S . -B $JGB_BUILD_BUILD_DIR
  cmake  --build $JGB_BUILD_BUILD_DIR
  if [ "$JGB_BUILD_INSTALL" == yes ] ; then
    pre_install
    cmake --install $JGB_BUILD_BUILD_DIR
  fi
elif [ "$JGB_BUILD_BACK_END" == "meson" ] ; then
  if is_cross_compile ; then
    meson_cross_file=${JGB_BUILD_BUILD_ARCH}-${JGB_BUILD_HOST_ARCH}.cross
    meson_cross_file_path=$JGB_BUILD_CONFIG_DIR/meson/$meson_cross_file
    if [ -f $meson_cross_file_path ] ; then
      JGB_BUILD_MESON_OPTIONS=" --cross-file=$meson_cross_file_path"
    else
      echo "没有找到 $meson_cross_file 文件"
      exit 1
    fi
  fi
  meson setup --prefix=$JGB_BUILD_DESTDIR $JGB_BUILD_MESON_OPTIONS $MESON_OPTIONS $JGB_BUILD_BUILD_DIR
  ninja -C $JGB_BUILD_BUILD_DIR
  if [ "$JGB_BUILD_INSTALL" == yes ] ; then
    pre_install
    ninja -C $JGB_BUILD_BUILD_DIR install
  fi
elif [ "$JGB_BUILD_BACK_END" == "autoconf" ] ; then
  if [ ! -x configure ] ; then
    if [ -x autogen.sh ]  ; then
      ./autogen.sh
    elif [ -x bootstrap.sh ] ; then
      ./bootstrap.sh
    else
      jgb-autogen.sh
    fi
  fi

  if is_cross_compile ; then
    if [ "$JGB_BUILD_CONFIGURE_OPTIONS_HOST" == yes ] ; then
      JGB_BUILD_CONFIGURE_OPTIONS="--host=${JGB_BUILD_HOST}"
    fi
  fi
  if [ -x configure ] ; then
    ./configure --prefix=$JGB_BUILD_DESTDIR $JGB_BUILD_CONFIGURE_OPTIONS
    make $JGB_BUILD_MAKE_OPTIONS
    if [ "$JGB_BUILD_INSTALL" == yes ] ; then
      pre_install
      $JGB_BUILD_INSTALL_FAKEROOT make $JGB_BUILD_MAKE_INSTALL_TARGET
    fi
  else
    echo "configure not found"
    exit 1
  fi
elif [ "$JGB_BUILD_BACK_END" == "makefile" ] ; then
  # TODO: 交叉编译时指定 CC 等变量
  make $JGB_BUILD_MAKE_OPTIONS $MAKE_OPTIONS
  if [ "$JGB_BUILD_INSTALL" == yes ] ; then
    pre_install
    $JGB_BUILD_INSTALL_FAKEROOT make $JGB_BUILD_MAKE_INSTALL_TARGET DESTDIR=$JGB_BUILD_DESTDIR $MAKE_INSTALL_OPTIONS
  fi
elif [ "$JGB_BUILD_BACK_END" == "adhoc" ] ; then
  pre_install
  . local-build
fi

if [ "$JGB_BUILD_PACK" == yes ] ; then
  [ -f ${output_dir}/${package_file_name} ] && rm -f ${output_dir}/${package_file_name}
  jgb_pushd $JGB_BUILD_DESTDIR
  find . -newercc $ref_file -print0 | tar --null -czf ${output_dir}/${package_file_name} --no-recursion --files-from=-
  jgb_popd
  ln -sf ${package_file_name} ${output_dir}/${package_file_name_short}
  echo "打包完成: $output_dir/$package_file_name" "  [ $package_file_name_short ]"
fi

if [ "$JGB_BUILD_INSTALL" == yes  ] ; then
  jgb_pushd $JGB_BUILD_DESTDIR
  find . -newercc $ref_file ! -name $install_file > $install_file
  rm $ref_file
  jgb_popd
fi

stat_time_end=$(date +%s.%N)
# scale 只对除法有效？
stat_time_used=$(echo "scale=1;($stat_time_end-$stat_time_start)/1" | bc)
# bc 将 0.1 显示为 .1
stat_time_used=$(echo $stat_time_used | sed 's/^\./0./')
echo "用时 $stat_time_used 秒"
