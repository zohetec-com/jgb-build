#!/bin/bash
set -e

. jgb-helper

help()
{
    echo "[Usage] jgb-release [-f FILE] [ -p ARCH]"
    echo "-f FILE 指定组装清单文件"
    echo "-h display this help text, then exit"
    echo "-p ARCH 选择目标架构"
    exit 1
} >&2

install_packages()
{
    local m=$1
    local arch=$2

    [ -n "$arch" ]
    [ -n "$m" ]

    if [ -n "$jgb_destdir" ] ; then
      jgb_destdir=$(echo -n $jgb_destdir | sed 's/^\/*//g')
    fi

    echo remove $PWD/$m
    rm $m -rf
    mkdir -p $m/$jgb_destdir

    for pk_full_name in $jgb_packages ;
    do
      [ $pk_full_name != null ]
      pk=$(echo $pk_full_name | cut -d@ -f1)
      variant=$(echo $pk_full_name | cut -d@ -f2 -s)
      x_variant=
      if [ -n "$variant" ] ; then
        x_variant="_${variant}"
      fi
      pk_file=${pk}${x_variant}.tar.gz
      # 优先使用本地发布的版本。
      pk_file_path=${JGB_BUILD_DIR}/local/packages/$m/$arch/$pk/$pk_file
      if [ -f $pk_file_path ] ; then
        notify_msg="[local]"
      else
        pk_file_path=${JGB_BUILD_DIR}/dist/packages/$m/$arch/$pk/$pk_file
      fi
      if [ ! -f $pk_file_path ] ; then
        echo "not found: $pk [ $pk_file_path ]"
        exit 1
      fi
      echo "extract: $pk_full_name $notify_msg"
      tar -C $m/$jgb_destdir -xf $pk_file_path $jgb_tar_opt
    done
    chksum_file=$(mktemp /tmp/jgb-release.XXXX)
    jgb_pushd $m/$jgb_destdir
    find . -type f  -exec sha256sum {} \; > $chksum_file
    mv $chksum_file sha256sum.txt
    # https://phoenixnap.com/kb/bash-heredoc
    cat << EOF > release.json
    {"release":"$jgb_release","version":"$jgb_version","date":"$jgb_date","config":"$m"}
EOF
    jgb_popd
}

create_tar()
{
    local m=$1
    local arch=$2
    local compress=$3

    [ -n "$m" ]
    [ -n "$arch" ]
    [ -n "$compress" ]

    if [ $compress == gzip ] ; then
      suffix=gz
    elif [ $compress == bzip2 ] ; then
      suffix=bz2
    else
      echo "unknown compress type: $compress"
      exit 1
    fi
    local re_file=${jgb_release}_V${jgb_version}_${jgb_date_short}_${arch}.tar.${suffix}
    local re_file_short=${jgb_release}_${arch}.tar.${suffix}
    local re_dir=${JGB_BUILD_DIR}/local/releases/${jgb_release}/$m
    local re_file_path=$re_dir/$re_file
    local re_file_short_path=$re_dir/$re_file_short
    mkdir -p $re_dir
    tar -C $m -caf $re_file_path .
    ln -sf $re_file $re_file_short_path
    echo created: $re_file_path
}

create_7z()
{
    local m=$1
    local arch=$2

    [ -n "$m" ]
    [ -n "$arch" ]

    local re_file=${jgb_release}_V${jgb_version}_${jgb_date_short}_${arch}.7z
    local re_file_short=${jgb_release}_${arch}.7z
    local re_dir=${JGB_BUILD_DIR}/local/releases/${jgb_release}/$m
    local re_file_path=$re_dir/$re_file
    local re_file_short_path=$re_dir/$re_file_short
    [ -f $re_file_path ] && rm $re_file_path
    mkdir -p $re_dir
    jgb_pushd $m
    7z a $re_file_path
    ln -sf $re_file $re_file_short_path
    echo created: $re_file_path
    jgb_popd
}

# https://www.iodigital.com/en/history/intracto/creating-debianubuntu-deb-packages
create_deb()
{
    local m=$1
    local arch=$2

    [ -n "$m" ]
    [ -n "$arch" ]

    # dpkg-architecture -L
    if [ "$arch" == x86_64 ] ; then
      deb_arch=amd64
    elif [[ "$arch" == "aarch64"* ]] ; then
      deb_arch=arm64
    fi
    local re_file=${jgb_release}_V${jgb_version}_${jgb_date_short}_${arch}.deb
    local re_file_short=${jgb_release}_${arch}.deb
    local re_dir=${JGB_BUILD_DIR}/local/releases/${jgb_release}/$m
    local re_file_path=$re_dir/$re_file
    local re_file_short_path=$re_dir/$re_file_short
    local control_file=DEBIAN/control
    mkdir -p $re_dir
    jgb_pushd $m
    # dpkg-deb 要求 DEBIAN 是目录，不能是软连接。
    if [ -n "$jgb_destdir" ] ; then
      [ -d $jgb_destdir/DEBIAN ]
      /bin/cp -rv $jgb_destdir/DEBIAN .
    fi
    [ -f $control_file ]
    sed -i -e "s/JGB_RELEASE_ARCH/$deb_arch/g" \
        -e "s/JGB_RELEASE/$jgb_release/g" \
        -e "s/JGB_VERSION/$jgb_version/g" \
        $control_file
    dpkg-deb --build . $re_file_path
    ln -sf $re_file $re_file_short_path
    echo created: $re_file_path
    if [ -n "$jgb_destdir" ] ; then
      rm -r DEBIAN
    fi
    jgb_popd
}

while getopts f:hp: opt; do
  case ${opt} in
    f)
      jgb_list_file=$OPTARG
      ;;
    h)
      help
      ;;
    p)
      jgb_archs+=" $OPTARG"
      ;;
    ?)
      ;;
  esac
done

jgb_release=$(jq -r .release $jgb_list_file)
jgb_version=$(jq -r .version $jgb_list_file)
jgb_packages=$(jq -r .packages[] $jgb_list_file)
if [ -z "$jgb_archs" ] ; then
  jgb_archs=$(jq -r .architectures[] $jgb_list_file)
fi
jgb_format=$(jq -c .format[] $jgb_list_file)
jgb_exclude=$(jq -r .exclude $jgb_list_file)
if [ $jgb_exclude != null ] ; then
  [ -r $jgb_exclude ]
  jgb_tar_opt="-X $jgb_exclude"
fi
jgb_destdir=$(jq -r .destdir $jgb_list_file)
if [ "$jgb_destdir" == null ] ; then
  jgb_destdir=
fi
jgb_date=$(date)
jgb_date_short=$(date +%Y%m%d)

for m in Debug Release;
do
  for arch in $jgb_archs;
  do
    install_packages $m $arch
    for format in $jgb_format;
    do
      type=$(echo $format | jq -r .type)
      if [ $type == tar ] ; then
        compress=$(echo $format | jq -r .compress)
        create_tar $m $arch $compress
      elif [ $type == 7z ] ; then
        create_7z $m $arch
      elif [ $type == deb ] ; then
        create_deb $m $arch
      fi
    done
  done
done
